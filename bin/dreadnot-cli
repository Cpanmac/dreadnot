#!/usr/bin/env node
/*
 *  Copyright 2011 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var logmagic = require('logmagic');
var log = require('logmagic').local('cli');
var optimist = require("optimist");
var fs = require("fs");
var url = require("url");
var querystring = require('querystring');
var http = require('http');
var https = require('https');
var terminal = require('terminal');
var util = require('util');
var argv;

exports.buildSink = function f(includeDate, includeColors) {
  includeDate = includeDate || false;

  if (includeColors === undefined) {
    includeColors = true;
  }

  return function(modulename, level, message, obj) {
    if (includeColors) {
      console.log(terminal.stylize('' + message));
    }

  }
};

logmagic.registerSink("service", exports.buildSink(true));

logmagic.route('cli', logmagic.INFO, 'service');

/* CLI Options */
var argv = require('optimist')
  .usage("Usage: $0 [-clsrw] -c [/path/to/settings.js] -s [stack_name] -r [region] -w ['warning message'] {options}'")
  .options('c', {
    'alias': 'config',
    'desc': 'Config File.'
  })
  .options('s', {
    'alias': 'stack',
    'desc': 'The stack name.'
  })
  .options('r', {
    'alias': 'region',
    'desc': 'The region to deploy.'
  })
  .options('l', {
    'alias': 'list',
    'desc': 'Pulls down the list, with -r or -s display just stacks or regions otherwise display all.'
  })
  .options('w', {
    'alias': 'warning',
    'desc': 'Allows you to set the warning message.'
  })
  .argv;

function reqOptions(host, port, path, method, data, auth) {
  var options = (method === 'POST') ? {
    host: host,
    port: port,
    path: path,
    method: method,
    headers: {
      'Authorization': auth,
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  } : {
      host: host,
      port: port,
      path: path,
      method: method,
      headers: {
        'Authorization': auth,
      }
  };

  return options;
}

/* deployment spinner, where we ingest the stream and return the data to user */
if (process.argv.length > 2) {
  /* clean up config and argv detection */
  if (!argv.c) {
    try {
      var config = JSON.parse(fs.readFileSync(process.env.HOME + '/.settings.json'));
    } catch (err) {
      log.infof('[red]${e}[/red]', {e: err});
    }
  } else {
    try {
      var config = JSON.parse(fs.readFileSync(process.env.PWD + '/' + argv.c));
    } catch (err){
      log.infof('[red]${e}[/red]', {e: err});
    }
  }
  
  var host = (config) ? url.parse(config.dreadnot_url) : url.parse('http://localhost'),
      auth = (config) ? 'Basic ' + new Buffer(config.username + ':' + config.password).toString('base64') : 'nouserpass',
      stack = argv.s,
      region = argv.r,
      list = argv.l,
      warning = argv.w,
      protocol = (host.protocol === "https") ? 'https' : 'http';

  if (config) {
    if (warning) {
      /* Warning Post data */
      if (warning === 'clear') {
        warning = '';
      } else {
        warning = warning;
      }

      var warnData = querystring.stringify({
        'action' : 'save',
        'warning_text' : warning
      });

      /* Set the warning message if you want to. */
      var req = http.request(reqOptions(host.hostname, host.port, config.api_path + 'warning', 'POST', warnData, auth), function(res) {
        res.on('data', function(warn) {
          var message = JSON.parse(warn);
          if (message.message != '') {
            log.infof('Message set succesfully to: ${message}', {message: message.message});
          } else {
            log.infof('[red]Warning message cleared.[/red]');
          }
        });
      });
      req.write(warnData);
      req.end();

      req.on('error', function(e) {
        log.infof('[red]${e}[/red]', {e: e});
      });

    } else if (warning === ''){
      /* warning cannot be empty */
      log.infof('Warning cannot be set blank.');
    }

    if (list) {
      var req = http.request(reqOptions(host.hostname, host.port, config.api_path, 'GET', null, auth), 
      function(res) {
          res.on('data', function(chunk) {
            var listApi = JSON.parse(chunk);
            for(var i=0; i<listApi.stacks.length; i++) {
              var stack = listApi.stacks[i];
              log.infof('stack: ${stack}', {stack: stack.name});
                for(var r=0; r<stack.regions.length; r++) {
                  var deployedVersion = stack.regions[r].deployed_revision;
                  var newVersion = (stack.regions[r].latest_deployment === null) ? "NULL" : stack.regions[r].latest_deployment.to_revision;
                  var regionName = stack.regions[r].name;
                  log.infof('\t[ [red]${regionName}[/red] ] Current: ${newVersion} Old: ${deployedVersion}',{
                    regionName: regionName,
                    newVersion: newVersion,
                    deployedVersion: deployedVersion
                  });
                }
            }
        });
      });
      req.on('error', function(e) {
        log.infof('[red]${e}[/red]', {e: e});
      });
      req.end();

    } else if (argv.s && argv.r) {

      var req = http.request(
        reqOptions(host.hostname, host.port, config.api_path + 'stacks/' + stack + '/regions/' + region, 'GET', null, auth),
        function(res) {
        /* Parse API */
        res.on('data', function(d) {
          /* Assuming API returns data. */
          var parsedApi = JSON.parse(d);

          if (argv.s && argv.r) {
            var req = http.request(reqOptions(host.hostname, host.port, config.api_path + 'warning', 'GET', null, auth), function(res) {
              res.on('data', function(warn) {
                var message = JSON.parse(warn);
                if (message.message != '') {
                  log.infof('Not deploying warning set.');
                  log.infof('\nWarning Message: ${message}', {message: message.message});
                  process.exit(0);
                }
              });
            });

            req.end();

            var postData = querystring.stringify({
              'to_revision' : parsedApi.stack.latest_revision
            });

            var deploymentNum = '';
            var postReq = http.request(
              reqOptions(host.hostname, host.port, config.api_path + 'stacks/' + stack + '/regions/' + region, 'POST', postData, auth), 
              function(res) {
              /* POST OUR DATA */
              res.setEncoding('utf8');

              res.on('data', function (end){
                var parsedStream = JSON.parse(end);
                deploymentNum = parsedStream.name;

                var req = http.request(
                  reqOptions(host.hostname, host.port, config.api_path + 'stacks/' + stack + '/regions/' + region + '/deployments/' + deploymentNum + '/log', 'GET', postData, auth), 
                  function (res) {
                    res.on('data', function (chunk) {
                      /* tail our log stream. */
                      var logStream = JSON.parse(chunk);
                      log.infof('[green]${logs}[/green]', { logs: logStream.msg });
                    });

                    res.on('end', function (endState) {
                      log.infof('[green]Finished run.[/green]');
                    });
                  });

                  req.on('error', function(e) {
                    log.infof('[red]${e}[/red]', {e: e});
                  });
                  req.end();

              });
            });

            postReq.on('error', function(e) {
              log.infof('[red]${e}[/red]', {e: e});
            });

            postReq.write(postData);
            postReq.end();
          }
        });
      });

      req.on('error', function(e) {
        log.infof('[red]${e}[/red]', {e: e});
      });
      req.end();
    }
  }

} else {
  optimist.showHelp();
}
